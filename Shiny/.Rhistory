temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
library(ggplot2)
library(dplyr)
summary(temp)
temp %>%
ggplot() +
geom_density(x = Body.Temp)
temp %>%
ggplot() +
geom_density(aes(x = Body.Temp))
summary(temp)
temp %>%
ggplot(aes(x = Gender)) +
geom_bar()
t.test(temp$Body.Temp, mu = 98.6, alternative = 'greater')
female = temp %>%
group_by(Gender) %>%
summarise(sd = sd(Heart.Rate))
hr = temp %>%
group_by(Gender) %>%
summarise(sd = sd(Heart.Rate))
hr
hr[1,2]
hr[1,2]^2 / hr[2,2]^2
summary(temp)
head(temp)
men = temp %>%
filter(Gender = 'Male') %>%
select(Heart.Rate)
men = temp %>%
filter(Gender == 'Male') %>%
select(Heart.Rate)
men
female = temp %>%
filter(Gender == 'Female') %>%
select(Heart.Rate)
var.test(male, female, alternative = 'two.sided')
var.test(men, female, alternative = 'two.sided')
female = temp %>%
filter(Gender == 'Female') %>%
select(Heart.Rate, drop = F)
female = temp %>%
filter(Gender == 'Female') %>%
select(Heart.Rate, drop = F)
male = as.data.frame(male)
female = as.data.frame(female)
var.test(men, female, alternative = 'two.sided')
data('PlantGrowth')
plant = data('PlantGrowth')
table(plant)
head(plant)
datasets::PlantGrowth
plant = datasets::PlantGrowth
head(plant)
summary(plant)
plant %>%
ggplot(aes(x = group)) +
geom_boxplot()
plant %>%
ggplot(aes(x = group)) +
geom_boxplot(aes(y = plant$weight))
t.test(temp$Body.Temp, mu = 98.6, alternative = 'two.sided')
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#1a Example numerical EDA.
summary(temp)
# We can also use str(),dim(),nrow(),ncol() to know the dataset
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
# use sapply: sapply(temp, sd)
cor(temp$Body.Temp, temp$Heart.Rate) # Bivariate methods
#http://purpledreams.com/~mike/math_studies_11/statistics_08.pdf
# no strong linear relationship
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
# bivariate density plot
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
# scatter plot
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
library(ggplot2)
library(datasets)
PlantGrowth
#1 Creating side-by-side boxplots of the data.
boxplot(weight ~ group, data = PlantGrowth)
#2a Calculating the standard deviations of each treatment group.
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
# Use ggplot
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot(color = c("red", "blue", "green"))
#Conducting the Bartlett test of homogeneity of variances.
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#The p-value for this test is > 0.05; we do not have statistical evidence to
#conclude that the variances of the plant treatment groups are different.
#3a One-Way ANOVA - access the equality of means of two or more groups?
# What the relationship between a Two sample T-test and One-way ANOVA,if there are exactly two groups?
summary(aov(weight ~ group, data = PlantGrowth))
# plot(aov(weight ~ group, data = PlantGrowth))
#The p-value for this test is 0.02, which is smaller than our cutoff value of
#0.05; we have evidence to conclude that the average plant weight varies by the
#type of treatment that was applied. This conclusion is valid based on the
#Bartlett test because we determined that the group variances are not statistically
#different from one another.
#3b multiple comparisons
# https://en.wikipedia.org/wiki/Multiple_comparisons_problem
str(HairEyeColor)
#1ab Visualizing the data with a mosaic plot.
# A mosaic plot is a graphical display that allows you to
# examine the relationship among two or more categorical variables.
mosaicplot(HairEyeColor, shade = TRUE)
#https://medschool.vanderbilt.edu/cqs/files/cqs/media/DrTsai2_0.pdf
#Whereas most categories do not deviate very far from expected combination values,
#some appear to have high standardized residuals. In particular, the blond hair
#category for both genders with brown eyes does not contain a lot of observations.
#On the other hand, the blond hair category has a lot more than expected females
#with blue eyes.
#2a Reducing the dataset to all hair colors, brown & blue eye colors, and just
#females.
reduced = HairEyeColor[,1:2,2]
#Visualizing the reduced data with a mosaic plot.
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
#The chi-squared test reports a significant p-value at the 0.05 level; thus we
#conclude that the hair and eye colors of females are not independent of one
#another.
#3 Calculating each category combination's contribution to the chi-squared
#statistic.
# H0: The hair and eye colors are independent of one another
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
# reduced.test$expected:the expected counts under the null hypothesis.
#Blonde hair and blue eyed females contributed the largest proportion to the chi-
#squared statistic with a value of 29.55; there were about 31 more observations
#in this category than we would have expected under the assumption of independence.
#Red hair and brown eyed females contributed the least proportion to the chi-
#squared statistic with a value of 1.42; there were only about 4 more observations
#in this category than we would have expected under the assumption of independence.
library(tidyverse)
library(tidycensus)
library(plotly)
library(leaflet)
library(sf)
scores <- read_csv('scores.csv')
scores <- na.omit(scores)
scores <- read_csv('scores.csv')
scores <- na.omit(scores)
setwd("~/Desktop/scores")
scores <- read_csv('scores.csv')
scores <- na.omit(scores)
#boxplot of scores
scores %>%
plot_ly(y = ~avg_score_math, type = 'box', name = 'Math',
text = ~school_name) %>%
add_trace(y = ~avg_score_reading, type = 'box', name = 'Reading',
text = ~school_name) %>%
add_trace(y = ~avg_score_writing, type = 'box', name = 'Writing',
text = ~school_name) %>%
layout(yaxis = list(title = ''), title = 'SAT Scores In NYC Public High Schools',
showlegend = F, colors = 'set1')
#scatterplot of scores
scores %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, jitter = .2, colors = 'set1') %>%
layout(title = 'Math And Reading Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
#map of schools
label <- paste(scores$school_name, 'Address:', scores$address, ', Zip:', scores$zip,
', Borough', scores$borough, ', Enrollment:', scores$enrollment,
', SAT Math:', scores$avg_score_math,
', SAT Reading:', scores$avg_score_reading, ', SAT Writing:',
scores$avg_score_writing, ', Percent Tested:', scores$percent_tested)
leaflet(scores) %>%
addTiles() %>%
addMarkers(~scores$longitude, ~scores$latitude,
label = scores$school_name,
popup = label)
#Denisty Chat Of Scores - Add Dropdown menu for specific categories
scores_total <- scores %>%
mutate(sat_total = avg_score_math + avg_score_reading +
avg_score_writing)
#Denisty Chat Of Scores - Add Dropdown menu for specific categories
scores_total <- scores %>%
mutate(sat_total = avg_score_math + avg_score_reading +
avg_score_writing)
#Denisty Chat Of Scores - Add Dropdown menu for specific categories
scores_total <- scores %>%
mutate(sat_total = avg_score_math + avg_score_reading +
avg_score_writing)
scores_total %>%
ggplot(aes(x = sat_total)) +
stat_density(aes(color=borough), geom="line",position="identity") +
labs(title='Density of Avg SAT Score By Borough',
x='Score',
y='Density') +
scale_colour_brewer(palette='Set1') +
theme_bw()
########### FORMAT INCOME DATA #######################
nyc <- read_csv('nyc.csv')
nyc <- nyc %>%
dplyr::rename(borough = population,
population = population_1)
nyc <- nyc %>%
separate(long_lat, into = c('longitude', 'latitude'),
sep = ',')
nyc <- nyc %>%
dplyr::mutate(household_income = as.numeric(gsub('[$,]', '',
household_income)))
View(nyc)
leaflet(scores) %>%
addTiles() %>%
addMarkers(~scores$longitude, ~scores$latitude,
label = scores$school_name,
popup = label)
# visualizing scores by zipcode using gather
scores %>%
dplyr::mutate(zip = as.character(zip)) %>%
dplyr::group_by(zip) %>%
dplyr::summarise(average_math = mean(avg_score_math),
average_reading = mean(avg_score_reading),
average_writing = mean(avg_score_writing)) %>%
dplyr::arrange(desc(average_math)) %>%
top_n(10) %>%
plot_ly(x = ~zip, y = ~average_math, type = 'bar',
name = 'Math', colors = 'set1') %>%
add_trace(y = ~average_reading, name = 'Reading') %>%
# add_trace(y = ~average_writing, name = 'Writing') %>%
layout(xaxis = list(title = 'Zip', tickangle = -45),
yaxis = list(title = 'Score'), barmode = 'group',
categoryorder = 'array', categoryarray = scores[order(~average_math)])
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = 'set1', marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = 'set1', marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
full <- left_join(scores, nyc, by = 'zip') %>%
select(-city, -building_code, -id) %>%
dplyr::mutate(household_income = as.numeric(gsub('[$,]', '', household_income)))
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = 'set1', marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = ~borough.x, marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
#Income By Zip
nyc %>%
na.omit(nyc) %>%
dplyr::mutate(zip = as.character(zip)) %>%
dplyr::mutate(household_income = as.numeric(gsub('[$,]', '', household_income))) %>%
dplyr::arrange(desc(household_income)) %>%
top_n(20) %>%
plot_ly(x = ~zip, y = ~household_income, type = 'bar',
name = 'Income', colors = 'set1') %>%
layout(title = 'Household Income By Zip', xaxis = list(title = 'Zip', tickangle = -45),
yaxis = list(title = 'Household Income'))
# visualizing scores by zipcode using gather
scores %>%
dplyr::mutate(zip = as.character(zip)) %>%
dplyr::group_by(zip) %>%
dplyr::summarise(average_math = mean(avg_score_math),
average_reading = mean(avg_score_reading),
average_writing = mean(avg_score_writing)) %>%
dplyr::arrange(desc(average_math)) %>%
top_n(10) %>%
plot_ly(x = ~zip, y = ~average_math, type = 'bar',
name = 'Math', colors = 'set1') %>%
add_trace(y = ~average_reading, name = 'Reading') %>%
# add_trace(y = ~average_writing, name = 'Writing') %>%
layout(xaxis = list(title = 'Zip', tickangle = -45),
yaxis = list(title = 'Score'), barmode = 'group',
categoryorder = 'array', categoryarray = scores[order(~average_math)])
#boxplot of scores
scores %>%
plot_ly(y = ~avg_score_math, type = 'box', name = 'Math',
text = ~school_name) %>%
add_trace(y = ~avg_score_reading, type = 'box', name = 'Reading',
text = ~school_name) %>%
add_trace(y = ~avg_score_writing, type = 'box', name = 'Writing',
text = ~school_name) %>%
layout(yaxis = list(title = ''), title = 'SAT Scores In NYC Public High Schools',
showlegend = F, colors = 'set1')
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = set1, marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = set1, marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
#Same scatter chart as above (x=math, y=reading) but with hh_income as size
full %>%
plot_ly(x = ~avg_score_math, y = ~avg_score_reading,
text = ~school_name, type = 'scatter', jitter = .3,
colors = 'set1', marker = list(size = ~household_income/5000, opacity = .5)) %>%
layout(title = 'Scores By School', xaxis = list(title = 'Avg Math SAT Score'),
yaxis = list(title = 'Avg Reading SAT Score'))
View(full)
dashboardPage(
dashboardHeader(title = 'My Dashboard'),
dashboardSidebar(
sidebarUserPanel("NYC DSA",
image = 'https://cbkdsanightschool.files.wordpress.com/2017/12/cropped-nyc-dsa-logo-simple.gif?w=200'),
sidebarMenu(
menuItem('Map',tabName = 'map',icon = icon('map')),
menuItem('Data',tabName = 'data',icon = icon('database')),
selectizeInput('selected',
'Select Iterm to Display',
choices=colnames(state_stat)[-1])
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'map',
fluidRow(infoBoxOutput("maxBox"),
infoBoxOutput("minBox"),
infoBoxOutput("avgBox")),
fluidRow(
box(htmlOutput('map'),height=300),
box(htmlOutput('hist'),height = 300)
)
),
tabItem(tabName = 'data',
fluidRow(
box(dataTableOutput('table'),width=12)
)
)
)
)
)
library(shiny)
library(shinydashboard)
library(googleVis)
library(dplyr)
library(tibble)
library(DT)
library(shiny)
library(shinydashboard)
library(googleVis)
library(dplyr)
library(tibble)
library(DT)
setwd("~/Desktop/scores")
state_stat=state.x77 %>%
as.data.frame() %>%
rownames_to_column('state.name')
setwd("~/Desktop/scores/Shiny")
runApp()
library(shiny)
library(shinydashboard)
library(googleVis)
library(dplyr)
library(tibble)
library(DT)
library(plotly)
library(leaflet)
# state_stat=state.x77 %>%
#   as.data.frame() %>%
#   rownames_to_column('state.name')
#public school score data
scores <- read_csv('scores.csv')
scores <- na.omit(scores)
#nyc data
nyc <- read_csv('nyc.csv')
nyc <- nyc %>%
dplyr::rename(borough = population,
population = population_1)
nyc <- nyc %>%
separate(long_lat, into = c('longitude', 'latitude'),
sep = ',')
nyc <- nyc %>%
dplyr::mutate(household_income = as.numeric(gsub('[$,]', '',
household_income)))
# Total data
full <- left_join(scores, nyc, by = 'zip') %>%
select(-city, -building_code, -id) %>%
dplyr::mutate(household_income = as.numeric(gsub('[$,]', '', household_income)))
View(full)
full <- full %>%
select(-borough.y,
borough = borough.x,
school_long = longitude.x,
school_lat = latitude.x,
zip_long = longitude.y,
zip_lat = latitude.y)
View(full)
full <- full %>%
select(-borough.y,
borough = borough.x,
school_long = longitude.x,
school_lat = latitude.x,
zip_lat = longitude.y,
zip_long = latitude.y)
# Total data
full <- left_join(scores, nyc, by = 'zip') %>%
select(-city, -building_code, -id) %>%
dplyr::mutate(household_income = as.numeric(gsub('[$,]', '', household_income)))
full <- full %>%
select(-borough.y,
borough = borough.x,
school_long = longitude.x,
school_lat = latitude.x,
zip_lat = longitude.y,
zip_long = latitude.y)
runApp()
runApp()
runApp()
